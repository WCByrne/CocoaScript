#!/usr/bin/env diamond

//
//  guardian
//  Diamond
//
//  Created by John Holdsworth on 18/09/2015.
//  Copyright Â© 2015 John Holdsworth. All rights reserved.
//
//  $Id: //depot/Diamond/Diamond/guardian#13 $
//
//  Repo: https://github.com/RubyNative/RubyNative
//

import Foundation
import SwiftRuby // clone RubyNative/SwiftRuby

//NSLog( "\(Process.arguments)" )

let pid = ENV["DIAMOND_CHILD_PID"]!.to_i
var status: Int32 = 0

if waitpid( pid_t(pid), &status, 0 ) < 0 || status & 0o177 == 0 {
    status >>= 8
    exit( status != 123 ? status : 0 )
}

var binary = "diamond"
var script = Process.arguments[1]
if script.hasSuffix( ".dmd" ) {
    binary = script.stringByReplacingOccurrencesOfString( ".dmd", withString: ".dme" )
}

let logs = "~/Library/Logs/DiagnosticReports/\(binary)_*.crash"
let recent = Time().to_f - 2

sleep( 1 )

while let log = IO.popen( "ls -t \(logs) 2>/dev/null | head -1" )?.readline() {
    if File.mtime( log )!.to_f < recent {
        print( "Waiting for recent \(logs)" )
        sleep( 1 )
    }
    else {
        var mainThread = true
        File.open( log )?.each_line {
            (line) in
            if mainThread && line.containsString( " + ") {
                var mutable = line.mutableString
                mutable["^((?:\\S+\\s+){3})(\\S+)"] =~ {
                    (groups: [String?]) in
                    return groups[1]!+_stdlib_demangleName( groups[2]! )
                }
                STDERR.print( "\(mutable)\n" )
                if line.containsString( " start + " ) {
                    mainThread = false
                }
            }
        }
        break
    }
}

if Process.arguments[Process.argc-1] != "-restarter" {
    exit( EXIT_FAILURE )
}
